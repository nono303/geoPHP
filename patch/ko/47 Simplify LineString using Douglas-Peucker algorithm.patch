From 56c9072f69ed1cec2fdd36da76fa595792b4aa24 Mon Sep 17 00:00:00 2001
From: Pol Dell'Aiera <Pol@47194.no-reply.drupal.org>
Date: Mon, 30 Jul 2012 23:16:42 +0200
Subject: [PATCH 1/2] Add new methods to Point class. Those methods are needed
 and useful for the Douglas-Peucker algo. Add the method simplify() for
 MultiLineString and LineString.

---
 lib/geometry/LineString.class.php      | 72 ++++++++++++++++++++++++++
 lib/geometry/MultiLineString.class.php | 22 ++++++++
 lib/geometry/Point.class.php           | 14 +++++
 tests/test.php                         |  1 +
 4 files changed, 109 insertions(+)

diff --git a/lib/geometry/LineString.class.php b/lib/geometry/LineString.class.php
index bef082c..2ecaa4a 100644
--- a/lib/geometry/LineString.class.php
+++ b/lib/geometry/LineString.class.php
@@ -186,5 +186,77 @@ public function lineSegmentIntersect($segment) {
     }
     return FALSE;
   }
+
+  public function simplify($tolerance = 0.5, $preserveTopology = TRUE) {
+    $tolerance_squared = $tolerance*$tolerance;
+    $this->douglasPeucker(0,count($this->components)-1, $tolerance_squared);
+    foreach ($this->components as $id => $point) {
+      if (isset($point->include)) {
+        $out[] = $this->components[$id];
+      }
+    }
+    return new LineString($out);
+  }
+
+  /**
+   * Douglas-Peuker polyline simplification algorithm. First draws single line
+   * from start to end. Then finds largest deviation from this straight line, and if
+   * greater than tolerance, includes that point, splitting the original line into
+   * two new lines. Repeats recursively for each new line created.
+   *
+   * @param int $start_vertex_index
+   * @param int $end_vertex_index
+   */
+  private function douglasPeucker($start_vertex_index, $end_vertex_index, $tolerance_squared) {
+    if ($end_vertex_index <= $start_vertex_index + 1) // there is nothing to simplify
+      return;
+
+    // Make line from start to end
+    $line = new LineString(array($this->components[$start_vertex_index],$this->components[$end_vertex_index]));
+
+    // Find largest distance from intermediate points to this line
+    $max_dist_to_line_squared = 0;
+    for ($index = $start_vertex_index+1; $index < $end_vertex_index; $index++) {
+      $dist_to_line_squared = $line->distanceToPointSquared($this->components[$index]);
+      if ($dist_to_line_squared>$max_dist_to_line_squared) {
+        $max_dist_to_line_squared = $dist_to_line_squared;
+        $max_dist_index = $index;
+      }
+    }
+
+    // Check max distance with tolerance
+    // error is worse than the tolerance
+    if ($max_dist_to_line_squared > $tolerance_squared) {
+      // split the polyline at the farthest vertex from S
+      $this->components[$max_dist_index]->include = true;
+      // recursively simplify the two subpolylines
+      $this->douglasPeucker($start_vertex_index,$max_dist_index, $tolerance_squared);
+      $this->douglasPeucker($max_dist_index,$end_vertex_index, $tolerance_squared);
+    }
+    // else the approximation is OK, so ignore intermediate vertices
+  }
+
+  public function distanceToPointSquared(Point $point) {
+    $startPoint = $this->startPoint(); // p1
+    $endPoint = $this->endPoint(); // p2
+
+    $v = new Point($point->x() - $startPoint->x(), $point->y() - $startPoint->y());
+    $l = new Point($endPoint->x() - $startPoint->x(), $endPoint->y() - $startPoint->y());
+    $dot = $v->dotProduct($l->unitVector());
+
+    if ($dot<=0) {
+      $dl = new LineString(array($startPoint,$point));
+      return pow($dl->length(), 2);
+    }
+    if ( ($dot*$dot) >= pow($this->length() ,2) ) {
+      $dl = new LineString(array($endPoint,$point));
+      return pow($dl->length(), 2);
+    }
+    else // Point within line
+    {
+      $v2 = new LineString(array($startPoint,$point));
+      return pow($v2->length(), 2) - $dot*$dot;
+    }
+  }
 }
 
diff --git a/lib/geometry/MultiLineString.class.php b/lib/geometry/MultiLineString.class.php
index 3ab085a..df1cd01 100644
--- a/lib/geometry/MultiLineString.class.php
+++ b/lib/geometry/MultiLineString.class.php
@@ -16,5 +16,27 @@ public function isClosed() {
     return TRUE;
   }
 
+  // Return the first Point of the first LineString.
+  public function startPoint() {
+    return $this->components[0]->components[0];
+  }
+
+  // Return the last Point of the last LineString.
+  public function endPoint() {
+    return end(end($this->components)->components);
+  }
+
+  public function simplify($tolerance = 0.5, $preserveTopology = TRUE) {
+    $components = array();
+    foreach ($this->components as $id => $line) {
+      $startPoint = $line->startPoint();
+      $endPoint = $line->endPoint();
+
+      $startPoint->include=TRUE;
+      $endPoint->include=TRUE;
+      $components[] = $line->simplify($tolerance, $preserveTopology);
+    }
+    return new MultiLineString($components);
+  }
 }
 
diff --git a/lib/geometry/Point.class.php b/lib/geometry/Point.class.php
index f49771e..5aacbc6 100644
--- a/lib/geometry/Point.class.php
+++ b/lib/geometry/Point.class.php
@@ -151,5 +151,19 @@ public function numInteriorRings() { return NULL; }
   public function interiorRingN($n)  { return NULL; }
   public function pointOnSurface()   { return NULL; }
   public function explode()          { return NULL; }
+
+  public function dotProduct(Point $v) {
+    return ($this->x() * $v->x() + $this->y() * $v->y());
+  }
+
+  public function magnitude() {
+    return sqrt($this->x()*$this->x() + $this->y()*$this->y());
+  }
+
+  public function unitVector() {
+    if ($this->magnitude()==0) return new Point(0,0);
+    return new Point($this->x()/$this->magnitude(),$this->y()/$this->magnitude());
+  }
+
 }
 
diff --git a/tests/test.php b/tests/test.php
index 43c62c5..253ea70 100644
--- a/tests/test.php
+++ b/tests/test.php
@@ -58,6 +58,7 @@ function test_geometry($geometry) {
   $geometry->geometryType();
   $geometry->SRID();
   $geometry->setSRID(4326);
+  $geometry->simplify(0.001);
 
   // Aliases
   $geometry->getCentroid();

From c123d449bdd160ce05dd03ae3272d6f8317f1f72 Mon Sep 17 00:00:00 2001
From: Pol Dell'Aiera <Pol@47194.no-reply.drupal.org>
Date: Tue, 31 Jul 2012 23:28:47 +0200
Subject: [PATCH 2/2] Update the magnitude method.

---
 lib/geometry/Point.class.php | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/lib/geometry/Point.class.php b/lib/geometry/Point.class.php
index 5aacbc6..6b08016 100644
--- a/lib/geometry/Point.class.php
+++ b/lib/geometry/Point.class.php
@@ -157,7 +157,7 @@ public function dotProduct(Point $v) {
   }
 
   public function magnitude() {
-    return sqrt($this->x()*$this->x() + $this->y()*$this->y());
+    return sqrt($this->dotProduct($this));
   }
 
   public function unitVector() {
