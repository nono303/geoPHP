From 27585df78ba82eac1349b3130fd297330d127f08 Mon Sep 17 00:00:00 2001
From: J Smith <dark.panda@gmail.com>
Date: Thu, 21 Jan 2016 17:22:18 -0500
Subject: [PATCH 1/3] Pack with `V` instead of `L` to ensure little endianness

---
 lib/adapters/EWKB.class.php | 14 +++++++-------
 lib/adapters/WKB.class.php  | 26 +++++++++++++-------------
 2 files changed, 20 insertions(+), 20 deletions(-)

diff --git a/lib/adapters/EWKB.class.php b/lib/adapters/EWKB.class.php
index 0d324d3..1b5a7c0 100644
--- a/lib/adapters/EWKB.class.php
+++ b/lib/adapters/EWKB.class.php
@@ -55,31 +55,31 @@ public function write(Geometry $geometry, $write_as_hex = FALSE) {
     
     switch ($geometry->getGeomType()) {
       case 'Point';
-        $wkb .= pack('L',1);
+        $wkb .= pack('V',1);
         $wkb .= $this->writePoint($geometry);
         break;
       case 'LineString';
-        $wkb .= pack('L',2);
+        $wkb .= pack('V',2);
         $wkb .= $this->writeLineString($geometry);
         break;
       case 'Polygon';
-        $wkb .= pack('L',3);
+        $wkb .= pack('V',3);
         $wkb .= $this->writePolygon($geometry);
         break;
       case 'MultiPoint';
-        $wkb .= pack('L',4);
+        $wkb .= pack('V',4);
         $wkb .= $this->writeMulti($geometry);
         break;
       case 'MultiLineString';
-        $wkb .= pack('L',5);
+        $wkb .= pack('V',5);
         $wkb .= $this->writeMulti($geometry);
         break;
       case 'MultiPolygon';
-        $wkb .= pack('L',6);
+        $wkb .= pack('V',6);
         $wkb .= $this->writeMulti($geometry);
         break;
       case 'GeometryCollection';
-        $wkb .= pack('L',7);
+        $wkb .= pack('V',7);
         $wkb .= $this->writeMulti($geometry);
         break;
     }
diff --git a/lib/adapters/WKB.class.php b/lib/adapters/WKB.class.php
index ebaff43..01a8680 100644
--- a/lib/adapters/WKB.class.php
+++ b/lib/adapters/WKB.class.php
@@ -96,7 +96,7 @@ function getPoint(&$mem) {
 
   function getLinstring(&$mem) {
     // Get the number of points expected in this string out of the first 4 bytes
-    $line_length = unpack('L',fread($mem,4));
+    $line_length = unpack('V',fread($mem,4));
 
     // Return an empty linestring if there is no line-length
     if (!$line_length[1]) return new LineString();
@@ -117,7 +117,7 @@ function getLinstring(&$mem) {
 
   function getPolygon(&$mem) {
     // Get the number of linestring expected in this poly out of the first 4 bytes
-    $poly_length = unpack('L',fread($mem,4));
+    $poly_length = unpack('V',fread($mem,4));
 
     $components = array();
     $i = 1;
@@ -130,7 +130,7 @@ function getPolygon(&$mem) {
 
   function getMulti(&$mem, $type) {
     // Get the number of items expected in this multi out of the first 4 bytes
-    $multi_length = unpack('L',fread($mem,4));
+    $multi_length = unpack('V',fread($mem,4));
 
     $components = array();
     $i = 1;
@@ -163,31 +163,31 @@ public function write(Geometry $geometry, $write_as_hex = FALSE) {
 
     switch ($geometry->getGeomType()) {
       case 'Point';
-        $wkb .= pack('L',1);
+        $wkb .= pack('V',1);
         $wkb .= $this->writePoint($geometry);
         break;
       case 'LineString';
-        $wkb .= pack('L',2);
+        $wkb .= pack('V',2);
         $wkb .= $this->writeLineString($geometry);
         break;
       case 'Polygon';
-        $wkb .= pack('L',3);
+        $wkb .= pack('V',3);
         $wkb .= $this->writePolygon($geometry);
         break;
       case 'MultiPoint';
-        $wkb .= pack('L',4);
+        $wkb .= pack('V',4);
         $wkb .= $this->writeMulti($geometry);
         break;
       case 'MultiLineString';
-        $wkb .= pack('L',5);
+        $wkb .= pack('V',5);
         $wkb .= $this->writeMulti($geometry);
         break;
       case 'MultiPolygon';
-        $wkb .= pack('L',6);
+        $wkb .= pack('V',6);
         $wkb .= $this->writeMulti($geometry);
         break;
       case 'GeometryCollection';
-        $wkb .= pack('L',7);
+        $wkb .= pack('V',7);
         $wkb .= $this->writeMulti($geometry);
         break;
     }
@@ -213,7 +213,7 @@ function writePoint($point) {
 
   function writeLineString($line) {
     // Set the number of points in this line
-    $wkb = pack('L',$line->numPoints());
+    $wkb = pack('V',$line->numPoints());
 
     // Set the coords
     foreach ($line->getComponents() as $point) {
@@ -225,7 +225,7 @@ function writeLineString($line) {
 
   function writePolygon($poly) {
     // Set the number of lines in this poly
-    $wkb = pack('L',$poly->numGeometries());
+    $wkb = pack('V',$poly->numGeometries());
 
     // Write the lines
     foreach ($poly->getComponents() as $line) {
@@ -237,7 +237,7 @@ function writePolygon($poly) {
 
   function writeMulti($geometry) {
     // Set the number of components
-    $wkb = pack('L',$geometry->numGeometries());
+    $wkb = pack('V',$geometry->numGeometries());
 
     // Write the components
     foreach ($geometry->getComponents() as $component) {

From 83acd2d580349644b1fe879f820320d25ff8606e Mon Sep 17 00:00:00 2001
From: J Smith <dark.panda@gmail.com>
Date: Thu, 21 Jan 2016 17:24:54 -0500
Subject: [PATCH 2/3] Handle SRID with EWKB output

---
 lib/adapters/EWKB.class.php | 44 +++++++++++++++++++++++++++++++------
 lib/adapters/WKB.class.php  | 26 ++++++++++++++++------
 2 files changed, 56 insertions(+), 14 deletions(-)

diff --git a/lib/adapters/EWKB.class.php b/lib/adapters/EWKB.class.php
index 1b5a7c0..eab3d8d 100644
--- a/lib/adapters/EWKB.class.php
+++ b/lib/adapters/EWKB.class.php
@@ -55,31 +55,38 @@ public function write(Geometry $geometry, $write_as_hex = FALSE) {
     
     switch ($geometry->getGeomType()) {
       case 'Point';
-        $wkb .= pack('V',1);
+        $wkb .= $this->writeType($geometry, 1);
+        $wkb .= $this->writeSRID($geometry);
         $wkb .= $this->writePoint($geometry);
         break;
       case 'LineString';
-        $wkb .= pack('V',2);
+        $wkb .= $this->writeType($geometry, 2);
+        $wkb .= $this->writeSRID($geometry);
         $wkb .= $this->writeLineString($geometry);
         break;
       case 'Polygon';
-        $wkb .= pack('V',3);
+        $wkb .= $this->writeType($geometry, 3);
+        $wkb .= $this->writeSRID($geometry);
         $wkb .= $this->writePolygon($geometry);
         break;
       case 'MultiPoint';
-        $wkb .= pack('V',4);
+        $wkb .= $this->writeType($geometry, 4);
+        $wkb .= $this->writeSRID($geometry);
         $wkb .= $this->writeMulti($geometry);
         break;
       case 'MultiLineString';
-        $wkb .= pack('V',5);
+        $wkb .= $this->writeType($geometry, 5);
+        $wkb .= $this->writeSRID($geometry);
         $wkb .= $this->writeMulti($geometry);
         break;
       case 'MultiPolygon';
-        $wkb .= pack('V',6);
+        $wkb .= $this->writeType($geometry, 6);
+        $wkb .= $this->writeSRID($geometry);
         $wkb .= $this->writeMulti($geometry);
         break;
       case 'GeometryCollection';
-        $wkb .= pack('V',7);
+        $wkb .= $this->writeType($geometry, 7);
+        $wkb .= $this->writeSRID($geometry);
         $wkb .= $this->writeMulti($geometry);
         break;
     }
@@ -93,4 +100,27 @@ public function write(Geometry $geometry, $write_as_hex = FALSE) {
     }
   }
 
+  protected function writeType(Geometry $geometry, $type) {
+    if ($geometry->hasZ()) {
+      $type |= 0x80000000;
+    }
+
+    if ($geometry->isMeasured()) {
+      $type |= 0x40000000;
+    }
+
+    if ($geometry->getSRID()) {
+      $type |= 0x20000000;
+    }
+
+    return pack('V', $type);
+  }
+
+  protected function writeSRID(Geometry $geometry) {
+    $srid = $geometry->getSRID();
+
+    if ($srid) {
+      return pack('V', $srid);
+    }
+  }
 }
diff --git a/lib/adapters/WKB.class.php b/lib/adapters/WKB.class.php
index 01a8680..cfc7853 100644
--- a/lib/adapters/WKB.class.php
+++ b/lib/adapters/WKB.class.php
@@ -163,31 +163,31 @@ public function write(Geometry $geometry, $write_as_hex = FALSE) {
 
     switch ($geometry->getGeomType()) {
       case 'Point';
-        $wkb .= pack('V',1);
+        $wkb .= $this->writeType($geometry, 1);
         $wkb .= $this->writePoint($geometry);
         break;
       case 'LineString';
-        $wkb .= pack('V',2);
+        $wkb .= $this->writeType($geometry, 2);
         $wkb .= $this->writeLineString($geometry);
         break;
       case 'Polygon';
-        $wkb .= pack('V',3);
+        $wkb .= $this->writeType($geometry, 3);
         $wkb .= $this->writePolygon($geometry);
         break;
       case 'MultiPoint';
-        $wkb .= pack('V',4);
+        $wkb .= $this->writeType($geometry, 4);
         $wkb .= $this->writeMulti($geometry);
         break;
       case 'MultiLineString';
-        $wkb .= pack('V',5);
+        $wkb .= $this->writeType($geometry, 5);
         $wkb .= $this->writeMulti($geometry);
         break;
       case 'MultiPolygon';
-        $wkb .= pack('V',6);
+        $wkb .= $this->writeType($geometry, 6);
         $wkb .= $this->writeMulti($geometry);
         break;
       case 'GeometryCollection';
-        $wkb .= pack('V',7);
+        $wkb .= $this->writeType($geometry, 7);
         $wkb .= $this->writeMulti($geometry);
         break;
     }
@@ -247,4 +247,16 @@ function writeMulti($geometry) {
     return $wkb;
   }
 
+  protected function writeType(Geometry $geometry, $type) {
+    if ($geometry->hasZ()) {
+      $type |= 0x80000000;
+    }
+
+    if ($geometry->isMeasured()) {
+      $type |= 0x40000000;
+    }
+
+    return pack('V', $type);
+  }
+
 }

From e8b4ec1687a1e7a0d0feabbbce2c8bd493a0f6d3 Mon Sep 17 00:00:00 2001
From: J Smith <dark.panda@gmail.com>
Date: Thu, 21 Jan 2016 17:25:26 -0500
Subject: [PATCH 3/3] Add tests for WKB and EWKB output

---
 tests/tests/ewkbTest.php | 21 +++++++++++++++++++++
 tests/tests/wkbTest.php  | 21 +++++++++++++++++++++
 2 files changed, 42 insertions(+)
 create mode 100644 tests/tests/ewkbTest.php
 create mode 100644 tests/tests/wkbTest.php

diff --git a/tests/tests/ewkbTest.php b/tests/tests/ewkbTest.php
new file mode 100644
index 0000000..48e9790
--- /dev/null
+++ b/tests/tests/ewkbTest.php
@@ -0,0 +1,21 @@
+<?php
+require_once('../geoPHP.inc');
+
+class EWKBTests extends PHPUnit_Framework_TestCase {
+
+  function setUp() {
+
+  }
+
+  function testWithoutSRID() {
+    $geom = geoPHP::load('POINT(0 20)');
+    $this->assertEquals("\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x34\x40", $geom->out('ewkb'));
+    $this->assertEquals("010100000000000000000000000000000000003440", $geom->out('ewkb', true));
+  }
+
+  function testWithSRID() {
+    $geom = geoPHP::load('SRID=4326; POINT(0 20)');
+    $this->assertEquals("\x01\x01\x00\x00\x20\xE6\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x34\x40", $geom->out('ewkb'));
+    $this->assertEquals("0101000020e610000000000000000000000000000000003440", $geom->out('ewkb', true));
+  }
+}
diff --git a/tests/tests/wkbTest.php b/tests/tests/wkbTest.php
new file mode 100644
index 0000000..afc921e
--- /dev/null
+++ b/tests/tests/wkbTest.php
@@ -0,0 +1,21 @@
+<?php
+require_once('../geoPHP.inc');
+
+class WKBTests extends PHPUnit_Framework_TestCase {
+
+  function setUp() {
+
+  }
+
+  function testWithoutSRID() {
+    $geom = geoPHP::load('POINT(0 20)');
+    $this->assertEquals("\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x34\x40", $geom->out('wkb'));
+    $this->assertEquals("010100000000000000000000000000000000003440", $geom->out('wkb', true));
+  }
+
+  function testWithSRID() {
+    $geom = geoPHP::load('SRID=4326; POINT(0 20)');
+    $this->assertEquals("\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x34\x40", $geom->out('wkb'));
+    $this->assertEquals("010100000000000000000000000000000000003440", $geom->out('wkb', true));
+  }
+}
